/* Breakpoints
----------------------------------------*/

// Typographic scales which can be used.
//
// When the value is an integer the base-font-size gets multiplied by the power of the value.
// 16 * 1.067, 16 * 1.067 * 1.067 etc.
//
// When the value is a list there is no ratio, it is simply multiplication:
// 16 * 1, 16 * 2, 16 * 3 etc.

$typographic-scales:(
    'minor-second':     1.067,
    'major-second':     1.125,
    'minor-third':      1.2,
    'major-third':      1.25,
    'perfect-fourth':   1.33,
    'augmented-fourth': 1.414,
    'perfect-fifth':    1.5,
    'golden-ratio':     1.618,
    'fibonacci':        (1, 1, 2, 3, 5, 8, 13, 21),
    'custom':           (12/16, 14/16, 16/16, 20/16, 22/16, 24/16, 26/16, 28/16) // this should be the same length as the sizes defined in $typographic-scale-sizes
);


// Breakpoints
$typographic-breakpoints:(
    'xs':   (
        'font-size': 10,
        'line-height': 1.5,
        'scale': map-get($typographic-scales, 'fibonacci')
    )
);

// These should be ordered smallest to largest

$typographic-scale-names:(
        'xsmall',
        'small',
        'base',
        'epsilon',
        'delta',
        'gamma',
        'beta',
        'alpha'
);

// These should be ordered smallest to largest

$typographic-scale-sizes:(
        -2,
        -1,
        0,
        1,
        2,
        3,
        4,
        5
);

@function calculate-prop-value($prop, $value, $config, $context){
    $index: map-get-index-of-key($typographic-scale-names, $context); // for a non-fixed typographic scale
    $factor: nth($typographic-scale-sizes, $index); // for a fixed typographic scale

    // get config values
    $scale: map-get($config, 'scale');
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $line-height-px: $font-size * $line-height;

    $initial: 0;

    // initial value
    @if $prop == 'font-size' {
        $initial: $font-size;
    } @else {
        $initial: $font-size * ($line-height * $value);
    }

    @if type-of($scale) == list {
        $factor: nth($scale, $index);
        $initial: $initial * $factor;
    } @else {
        @if $factor >= 0 {
            @for $j from 0 to $factor {
                $initial: $initial * $scale;
            }
        } @else if $factor < 0 {
            @for $j from $factor to 0 {
                $initial: $initial / $scale;
            }
        }
    }

    @return $initial;
}

@mixin write-props ($map) {
    @each $key, $value in $map {
        #{$key}:$value + px;
    }
}

@mixin scale($props, $bp, $context: 'base'){
    $map: calculate-scale($props, $bp, $context);
    @include write-props($map);
}

@function get-font-size($config, $context: 'base'){
    @return calculate-prop-value('font-size', 1, $config, $context);
}

@function get-rhythm($config, $amount: 1, $context: 'base'){

    // base
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $line-height-pixels: $font-size * $line-height;

    // context
    $font-size-calculated: get-font-size($config, $context);
    $line-height-calculated: calculate-line-height($font-size-calculated, $config, $context, 1);

    // calculate a single unit of baseline
    $unit: $line-height-pixels/$font-size-calculated;

    @return $unit * $amount;
}


@function calculate-line-height($font-size, $config, $context: 'base', $extra: 0){
    $return: 0;
    $base-font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $line-height-pixels: $base-font-size * $line-height;
    $half: $line-height-pixels/2;
    @while $return < $font-size {
        $return: $return + $half;
    }

    // extra
    @if $extra {
        $return: $return + ($half * $extra);
    }

    @return $return;

}

@function calculate-prop($prop, $value, $config, $context: 'base'){
    $return: ();

    $newValue: $value;

    // calculate value
    $newValue: calculate-prop-value($prop, $value, $config, $context);

    // get start
    $return: ($prop: $newValue);

    // get index of context
    @return $return;

}

// Define a mixin with an argument named `$size`
@function calculate-scale($props: (), $breakpoint: nth($breakpoints, 1), $context: 'base') {
    $map: ();

    // get config
    $config: map-get($typographic-breakpoints, $breakpoint);

    // calculate each property
    @each $prop, $value in $props {

        @if $prop != 'line-height' and $prop != 'font-size' {
            $new:calculate-prop($prop, $value, $config, $context);
        }

        @if $prop == 'font-size' {
            $new:calculate-prop($prop, $value, $config, $context);
            $font-size: $new;
        }

        $map: map-merge($map, $new);

    }

    // calculate line-height
    // $res: ('line-height': calculate-line-height(nth($font-size, 1), $config));
    // $map: map-merge($map, $res);

    @return $map;

}

@function get-font-config-for-breakpoint($breakpoint: 'xs'){
    @return map-get($typographic-breakpoints, $break);
}

.xsmall { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'xsmall'); }
.small { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'small'); }
.base { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'base'); }
.epsilon { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'epsilon'); }
.delta { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'delta'); }
.gamma { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'gamma'); }
.beta { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'beta'); }
.alpha { $_props: ( 'font-size': 1, 'line-height': 1, 'margin-bottom': .5 ); @include scale($_props, 'xs', 'alpha'); }

$sizes: ('xs');
$test: ('xsmall', 'small', 'base', 'epsilon', 'gamma', 'delta');

@each $size in $sizes {
    $scope: map-get($typographic-breakpoints, $size);
    @if $scope {
        @each $name in $test {
            .#{$name} { // #{$name}
                border-top: get-rhythm($scope, 1, $name)+em solid red;
                border-bottom: get-rhythm($scope, 2, $name)+em solid blue;
            }
        }
    }
}


/* Set base font-size
----------------------------------------------- */

$base: 16; // browser default

//@each $bp-name, $bp-size in $breakpoints {
    $bp-config: map-get($typographic-breakpoints, 'xs');
    $bp: map-get($breakpoints, 'xs');
    $font-size: map-get($bp-config, 'font-size');
    $line-height: map-get($bp-config, 'line-height');

    @include respond-min('xs') {

        body {
            font-size: ($font-size/$base) * 100%;
            line-height: $line-height;
        }

        .baseline {
            background-size: 100% $line-height + em;
        }

    }

//}



/* Baseline background
----------------------------------------------- */

.baseline {
    background-image: linear-gradient(rgba(black, .05) 1px, rgba(black, .05) 50%, transparent 51%, transparent 100%);
    background-position: left top;


    h1,
    h2,
    h3,
    h4,
    h5,
    label,
    ol,
    ul,
    dl,
    p,
    blockquote,
    .alpha,
    .beta,
    .gamma,
    .delta,
    .epsilon,
    .small,
    .xsmall,
    .base {
        background: rgba(#FF0000, .25) !important;
    }

}