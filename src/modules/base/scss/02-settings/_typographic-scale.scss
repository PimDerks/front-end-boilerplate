/* Breakpoints
----------------------------------------*/

// Typographic scales which can be used.
//
// When the value is an integer the base-font-size gets multiplied by the power of the value.
// 16 * 1.067, 16 * 1.067 * 1.067 etc.
//
// When the value is a list there is no ratio, it is simply multiplication:
// 16 * 1, 16 * 2, 16 * 3 etc.

$typographic-scales:(
    'minor-second':     1.067,
    'major-second':     1.125,
    'minor-third':      1.2,
    'major-third':      1.25,
    'perfect-fourth':   1.33,
    'augmented-fourth': 1.414,
    'perfect-fifth':    1.5,
    'golden-ratio':     1.618,
    'custom':           (12/16, 14/16, 16/16, 20/16, 22/16, 24/16, 26/16, 28/16) // this should be the same length as the sizes defined in $typographic-scale-sizes
);

// Breakpoints
$typographic-breakpoints:(
    'xs':   (
        'font-size': 12,
        'line-height': 1.4,
        'scale': map-get($typographic-scales, 'major-third')
    ),
    's':    (
        'font-size': 13,
        'line-height': 1.5,
        'scale': map-get($typographic-scales, 'perfect-fourth')
    ),
    'm':    (
        'font-size': 14,
        'line-height': 1.6,
        'scale': map-get($typographic-scales, 'augmented-fourth')
    ),
    'l':    (
        'font-size': 15,
        'line-height': 1.7,
        'scale': map-get($typographic-scales, 'perfect-fifth')
    ),
    'xl':    (
        'font-size': 16,
        'line-height': 1.8,
        'scale': map-get($typographic-scales, 'custom')
    )
);

// Base font-size and line-height

$typographic-baseline:(
    'font-size': 16,
    'line-height': 1.5
);

// These should be ordered smallest to largest

$typographic-scale-sizes:(
    'xsmall': -2,
    'small': -1,
    'base': 0,
    'epsilon': 1,
    'delta': 2,
    'gamma': 3,
    'beta': 4,
    'alpha': 5
);

// Configure the scale to use

$typographic-scale: map-get($typographic-scales, 'custom');

// Get the base-font-size and line-height to use

$font-size: map-get($typographic-baseline, 'font-size');
$line-height: map-get($typographic-baseline, 'line-height');
$line-height-px: $font-size * $line-height;

@mixin generate-font-properties($bp, $size, $fs, $index) {
    $name: nth($size, 1);
    $ratio: nth($size, 2);
    $new-font-size: $fs;
    $new-line-height: 0;

    // calculate font-size

    @if type-of($scale) == list {
        $scaled: nth($scale, $index);
        $new-font-size: $new-font-size * $scaled;
    } @else {

        @if $ratio >= 0 {
            @for $j from 0 to $ratio {
                $new-font-size: $new-font-size * $scale;
            }
        } @else if $ratio < 0 {
            @for $j from $ratio to 0 {
                $new-font-size: $new-font-size / $scale;
            }
        }

    }

    // calculate line-height
    $half: $line-height-px/2;
    @while $new-line-height <= $new-font-size {
        $new-line-height: $new-line-height + $half;
    }

    font-size: $new-font-size + px;
    line-height: $new-line-height + px;
    margin-bottom: $line-height-px + px;

    // @debug $bp-name, $name, $font-size, '==>', $new-font-size, $new-line-height;

}

// Loop through breakpoints
@each $bp-name, $bp-size in $breakpoints {
    $bp-config: map-get($typographic-breakpoints, $bp-name);
    $bp: map-get($breakpoints, $bp-name);
    $scale: map-get($bp-config, 'scale');

    // maybe use respond-min-max here?
    @include respond-min($bp) {
        // Calculate font-size and line-height
        @for $i from 1 to length($typographic-scale-sizes) + 1 {
            $size: nth($typographic-scale-sizes, $i);
            $name: nth($size, 1);

            .#{$name} {
                @include generate-font-properties($bp, $size, $font-size, $i);
            }

        }
    }

    // @debug '------------';

}

@function get-baseline-height($amount:1, $breakpoint:'xs') {
    $bp: map-get($breakpoints, $breakpoint);
    $bp-config: map-get($typographic-breakpoints, $breakpoint);
    $line-height: map-get($bp-config, 'line-height');
    @return $line-height + em;
}

/* Set base font-size
----------------------------------------------- */

$base: 16; // browser default

@each $bp-name, $bp-size in $breakpoints {
    $bp-config: map-get($typographic-breakpoints, $bp-name);
    $bp: map-get($breakpoints, $bp-name);
    $font-size: map-get($bp-config, 'font-size');
    $line-height: map-get($bp-config, 'line-height');

    @include respond-min($bp) {

        body {
            font-size: ($font-size/$base) * 100%;
            line-height: $line-height;
        }

        .baseline {
            background-size: 100% $line-height + em;
        }

    }

}

/* Baseline background
----------------------------------------------- */

.baseline {
    background-image: linear-gradient(#EEEEEE 1px, #EEEEEE 50%, transparent 51%, transparent 100%);
    background-position: left top;

    h1,
    h2,
    h3,
    h4,
    h5,
    label,
    ol,
    ul,
    dl,
    p,
    .alpha,
    .beta,
    .gamma,
    .delta,
    .epsilon {
        background: rgba(#FF0000, .25) !important;
    }

}