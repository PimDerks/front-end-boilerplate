/*------------------------------------*\
    #TYPOGRAPHIC-SCALE-UTILS
\*------------------------------------*/

$unit: 'em';

@function rel($pixels, $font-size, $context){
    @if $unit == 'em' {
        @return $pixels/$context + em;
    } @else if $unit == 'rem' {
        @return $pixels/$font-size + rem;
    }
}

@function calc-rel ($pixels, $breakpoint: 'xs', $context: 'base'){

    // get config for breakpoint
    $config: map-get($typographic-breakpoints, $breakpoint);

    @if not $config {
        @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$typographic-breakpoints` map.';
    }

    // get config values
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');

    // get calculated font-size in pixels
    $context: get-font-size($config, $context);

    @return rel($pixels, $font-size, $context);

}

@function baseline ($amount: 1, $breakpoint: 'xs', $context: 'base'){

    // get config for breakpoint
    $config: map-get($typographic-breakpoints, $breakpoint);

    @if not $config {
        @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$typographic-breakpoints` map.';
    }

    // get config values
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');

    // calculate line-height in pixels
    $pixels: $font-size * $line-height;

    @return calc-rel($pixels * $amount, $breakpoint, $context);

}

@mixin write-props ($map, $config, $context) {

    // get config values
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $scale: map-get($config, 'scale');

    // get calculated font-size in pixels
    $context: get-font-size($config, $context);

    // fill!
    @each $key, $value in $map {

        @if $key == 'font-size'{
            $out: $value/$font-size + em;
        } @else {
            $out: $value/$context + em;
        }

        #{$key}: $out;

    }
}

@function value-scale($value, $scale, $index){

    @if type-of($scale) == list {
        $factor: nth($scale, $index); // for a custom typographic scale
        $value: $value * $factor;
    } @else {
        $factor: nth($typographic-scale-sizes, $index); // for a fixed typographic scale
        $value: $value * pow($scale, $factor);
    }
    @return $value;

}

@function calculate-prop-value($prop, $value, $config, $context){
    $index: map-get-index-of-key($typographic-scale-names, $context); // for a non-fixed typographic scale

    // get config values
    $scale: map-get($config, 'scale');
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');

    $initial: 0;

    // initial value
    @if $prop == 'font-size' {
        $initial: $font-size;
    } @else {
        $initial: $font-size * ($line-height * $value);
    }

    @return value-scale($initial, $scale, $index);

}

@function get-line-height($font-size, $config, $context: 'base', $extra: 0){
    $return: 0;
    $base-font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $line-height-pixels: $base-font-size * $line-height;
    $half: $line-height-pixels/2;
    @while $return < $font-size {
        $return: $return + $half;
    }

    // extra
    @if $extra {
        $return: $return + ($half * $extra);
    }

    @return $return;

}

@function get-font-size($config, $context: 'base'){
    @return calculate-prop-value('font-size', 1, $config, $context);
}

@function calculate-scale($breakpoint: nth($breakpoints, 1), $context: 'base') {
    $map: ();

    // get config
    $config: map-get($typographic-breakpoints, $breakpoint);

    // calculate font-size
    $font-size-calculated: get-font-size($config, $context);
    $font-size: ('font-size': $font-size-calculated);
    $map: map-merge($map, $font-size);

    // calculate line-height
    $line-height: ('line-height': get-line-height($font-size-calculated, $config));
    $map: map-merge($map, $line-height);

    @return $map;

}


@mixin scale($bp, $context: 'base'){

    // calculate scale
    $map: calculate-scale($bp, $context);

    // convert to relative units
    $config: map-get($typographic-breakpoints, $bp);

    @if not $config {
        @error 'No value found for `#{$bp}`. Please make sure it is defined in `$typographic-breakpoints` map.';
    }

    @include write-props($map, $config, $context);

}