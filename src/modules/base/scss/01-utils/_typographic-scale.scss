/*------------------------------------*\
    #TYPOGRAPHIC-SCALE-UTILS
\*------------------------------------*/

@mixin write-props ($map, $config, $context) {

    // get config values
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $scale: map-get($config, 'scale');

    // get calculated font-size in pixels
    $context: get-font-size($config, $context);

    // fill!
    @each $key, $value in $map {

        @if $key == 'font-size'{
            $out: $value/$font-size + em;
        } @else {
            $out: $value/$context + em;
        }

        #{$key}: $out;

    }
}

@mixin scale($props, $bp, $context: 'base'){

    // calculate scale
    $map: calculate-scale($props, $bp, $context);

    // convert to relative units
    $config: map-get($typographic-breakpoints, $bp);
    @include write-props($map, $config, $context);

}

@function get-font-size($config, $context: 'base'){
    @return calculate-prop-value('font-size', 1, $config, $context);
}

@function calculate-prop-value($prop, $value, $config, $context){
    $index: map-get-index-of-key($typographic-scale-names, $context); // for a non-fixed typographic scale
    $factor: nth($typographic-scale-sizes, $index); // for a fixed typographic scale

    // get config values
    $scale: map-get($config, 'scale');
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');

    $initial: 0;

    // initial value
    @if $prop == 'font-size' {
        $initial: $font-size;
    } @else {
        $initial: $font-size * ($line-height * $value);
    }

    $start: $initial;

    @if type-of($scale) == list {
        $factor: nth($scale, $index);
        $initial: $initial * $factor;
    } @else {
        @if $factor >= 0 {
            @for $j from 0 to $factor {
                $initial: $initial * $scale;
            }
        } @else if $factor < 0 {
            @for $j from $factor to 0 {
                $initial: $initial / $scale;
            }
        }
    }

    @return $initial;

}

@function get-rhythm($config, $amount: 1, $context: 'base'){

    // base
    $font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $line-height-pixels: $font-size * $line-height;

    // context
    $font-size-calculated: get-font-size($config, $context);
    $line-height-calculated: calculate-line-height($font-size-calculated, $config, $context, 0);

    // calculate a single unit of baseline
    $unit: $line-height-pixels/$font-size-calculated;

    // @debug $line-height-pixels, $font-size-calculated, $unit;

    @return $unit * $amount;
}


@function calculate-line-height($font-size, $config, $context: 'base', $extra: 0){
    $return: 0;
    $base-font-size: map-get($config, 'font-size');
    $line-height: map-get($config, 'line-height');
    $line-height-pixels: $base-font-size * $line-height;
    $half: $line-height-pixels/2;
    @while $return < $font-size {
        $return: $return + $half;
    }

    // extra
    @if $extra {
        $return: $return + ($half * $extra);
    }

    @return $return;

}

@function calculate-prop($prop, $value, $config, $context: 'base'){
    $return: ();

    $newValue: $value;

    // calculate value
    $newValue: calculate-prop-value($prop, $value, $config, $context);

    // get start
    $return: ($prop: $newValue);

    // get index of context
    @return $return;

}

// Define a mixin with an argument named `$size`
@function calculate-scale($props: (), $breakpoint: nth($breakpoints, 1), $context: 'base') {
    $map: ();

    // get config
    $config: map-get($typographic-breakpoints, $breakpoint);

    // calculate each property
    @each $prop, $value in $props {

        @if $prop != 'line-height' {
            $new: calculate-prop($prop, $value, $config, $context);
        }

        @if $prop == 'font-size' {
            $font-size: $new;
        }

        $map: map-merge($map, $new);

    }

    // calculate line-height
    $res: ('line-height': calculate-line-height(nth(nth($font-size, 1), 2), $config));
    $map: map-merge($map, $res);

    @return $map;

}

@function get-font-config-for-breakpoint($breakpoint: 'xs'){
    @return map-get($typographic-breakpoints, $break);
}