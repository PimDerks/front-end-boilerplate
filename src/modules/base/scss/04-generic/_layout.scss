/*------------------------------------*\
    #LAYOUT
\*------------------------------------*/

/* Grid
----------------------------------------------- */

.wrapper {
    margin-left: auto;
    margin-right: auto;
    max-width: $grid-max-width;
    padding-left: $grid-gutter;
    padding-right: $grid-gutter;
    position: relative;

    > *:last-child {
        margin-bottom: 0;
    }

}

.grid {

    // Allow the grid to be used on lists
    @include list-bare;

    margin-bottom: baseline(1);

    // Remove gutter from first and last column
    margin-left: -#{$grid-gutter};
    margin-right: -#{$grid-gutter};

    .grid__item {
        // margin-bottom: get-base-line-height(1);
        display: inline-block;
        padding: 0 #{$grid-gutter};
        vertical-align: top;
    }

    .grid__item[class*="pull"],
    .grid__item[class*="push"] {
        position: relative;
    }

    // Reverse order of grid.

    &.grid--rev {
        direction: rtl;
        text-align: left;

        > .grid__item {
            direction: ltr;
            text-align: left;
        }
    }

}

/* Grid equal height
----------------------------------------------- */
.grid--flex {
    display: flex;
    flex-wrap: wrap;

    .grid__item {
        display: flex;
    }
}

.grid__item--stretch {
    align-items: stretch;
}

/* Grid with vertical gutters between items
----------------------------------------------- */
.grid--gutter {
    margin-bottom: 0;

    > .grid__item {

    }

}

/* Grid with vertical gutters between items
----------------------------------------------- */
.grid--center {
    text-align: center;
}

/* Create column widths
----------------------------------------------- */

@for $j from 1 through length($grid-sizes) {
    $size:  nth($grid-sizes, $j);
    $size-name:  nth($size, 1);
    $size-code:  nth($size, 2);

    .grid__item--#{$size-name} {
        width: #{$size-code};
    }

    .grid__item--push-#{$size-name} {
        left: #{$size-code};
    }

    .grid__item--pull-#{$size-name} {
        left: -#{$size-code};
    }

}

/* Create columns for breakpoints
----------------------------------------------- */

@for $i from 1 through length($breakpoints) {
    $bp:  nth($breakpoints, $i);
    $bp-name:  nth($bp, 1);
    $bp-code:  nth($bp, 2);

    @include respond-min($bp-name) {

        @for $j from 1 through length($grid-sizes) {
            $size:  nth($grid-sizes, $j);
            $size-name:  nth($size, 1);
            $size-code:  nth($size, 2);

            // Generic width classes
            .grid__item--#{$size-name}\@#{$bp-name} {
                width: #{$size-code};
            }

            .grid__item--push-#{$size-name}\@#{$bp-name} {
                left: #{$size-code};
            }

            .grid__item--pull-#{$size-name}\@#{$bp-name} {
                left: -#{$size-code};
            }

        }

    }

}